#include <cstdlib>
#include <ctime>
#include <iostream>

using namespace std;

int main() {
    int* value_ptr = new int;

    // *value_ptr принимает случайное значение (для примера)
    srand(time(0));
    *value_ptr = rand();

    if (bool delete_now = (*value_ptr % 2) == 0;  // Этот код будет выполнен только для чётных значений *value_ptr
        delete_now) {
        // Эта проверка на нулевой указатель перед вызовом delete является избыточной.
        // Оператор delete ничего не делает, если вызвать его с нулевым указателем
        if (value_ptr) {
            delete value_ptr;

            // А вот обнулить указатель после удаления объекта имеет смысл, если
            // этот указатель потенциально может ещё использоваться
            value_ptr = nullptr;
        }
    }

    // Указатель мог ранее обнулиться, поэтому здесь его следует проверить
    if (value_ptr) {
        cout << *value_ptr << endl;
    }

    // Удаляем объект, на который ссылается value_ptr. 
    // Проверку на nullptr перед удалением объекта смело пропускаем
    delete value_ptr;
    // value_ptr = nullptr;
    // Обнуление указателя на удалённый объект перед выходом избыточно, если
    // этот указатель далее по коду не используется - 
    // всё равно что помыть пол в доме перед сносом.
}